{{~
    set_name('PH_' + phase_type.name)  
    set_folder('_generated/PhaseTypes')
~}}
<pou name="PH_{{phase_type.name}}" pouType="functionBlock">
    <documentation>
    This is a custom phase logic implementation
  </documentation>
    <interface>
        <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                <Inheritance>
                    <Extends>PhaseLogic</Extends>
                </Inheritance>
            </data>
        </addData>
        <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"> {{ phase_type.title }}</xhtml>
        </documentation>

        <inOutVars>

            {{~## add all the control modules ##~}}
            {{~ for linked_control_module in phase_type.linked_control_modules ~}}
            <variable name="{{ linked_control_module.name}} ">
                <type><derived name="{{ linked_control_module.cm_type_name }}" /></type>
                <documentation><xhtml xmlns="http://www.w3.org/1999/xhtml"> {{ linked_control_module.comment }}</xhtml></documentation>
            </variable>
            {{~ end ~}}

        </inOutVars>

        <inputVars>

            {{~## add all the inputs from the phase type ##~}}
            {{~ for item in phase_type.inputs ~}}
            <variable name="{{ item.name}} ">
                <type><{{ map_data_type(item.data_type, 'BOOL', 'DINT', 'REAL') }} /></type>
                <documentation><xhtml xmlns="http://www.w3.org/1999/xhtml"> {{ item.single_line_comment }}</xhtml></documentation>
            </variable>
            {{~ end ~}}

        </inputVars>

        <outputVars>

            {{~## add all the outputs from the phase type ##~}}
            {{~ for item in phase_type.outputs ~}}
            <variable name="{{ item.name}} ">
                <type><{{ map_data_type(item.data_type, 'BOOL', 'DINT', 'REAL') }} /></type>
                <documentation><xhtml xmlns="http://www.w3.org/1999/xhtml"> {{ item.single_line_comment }}</xhtml></documentation>
            </variable>
            {{~ end ~}}

            {{~## add all the outputs from the recipe parameters ##~}}
            {{~ for item in phase_type.recipe_parameters ~}}
            <variable name="{{ item.name}} ">
                <type><{{ map_data_type(item.data_type, 'BOOL', 'DINT', 'REAL') }} /></type>
                <documentation><xhtml xmlns="http://www.w3.org/1999/xhtml"> {{ item.single_line_comment }}</xhtml></documentation>
            </variable>
            {{~ end ~}}

            {{~ # add outputs for the auto-generated timers -}}
            {{~ for item in phase_type.ordered_timer_definitions ~}}
            <variable name="{{ item.name}} ">
                <type><{{ map_data_type(item.data_type, 'BOOL', 'DINT', 'REAL') }} /></type>
                <documentation><xhtml xmlns="http://www.w3.org/1999/xhtml"> {{ item.single_line_comment }}</xhtml></documentation>
            </variable>
            {{~ end ~}}

        </outputVars>

        <localVars>
        </localVars>

        
        <tempVars>
        </tempVars>
    </interface>
    <body>
        <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
                <![CDATA[

CASE stepIndex OF
{{~ # loop over all the sequences ~}}
{{~ for sequence_name in ['Idle', 'Running', 'Completed', 'Holding', 'Held', 'Restarting', 'Aborting', 'Aborted'] ~}}
	{{~ sequence = phase_type.sequences_by_name[sequence_name] ~}}   
	{{~ if sequence         # checks if sequence is not null ~}}
		{{~ # loop over all the steps ~}}
		{{~ for step in sequence.ordered_steps ~}} 
    // {{sequence.name }} - Step {{ step.name }}
    {{ step.name }}:
        //================================
        {{ comment_all_lines(step.comment) }}
        //--------------------------------
        {{ comment_all_lines(step.actions) }}
        //================================

        // Action
			{{~ for action in step.continuous_actions ~}}
				{{~ if action.condition == "" ~}}
        {{ tia_convert_action(action) }};
				{{~ else ~}}
				  {{~ if action.has_delay ~}}
        StepTimer_{{ action.delay_timer_no }}.PT := T#1ms * REAL_TO_DINT({{ action.delay_timer_setting }} * {{ action.delay_multiplier }});
        StepTimer_{{ action.delay_timer_no }}.IN := NOT #PL_Global.ST.NewStep AND {{ tia_convert_condition(action.condition) }};
        StepTimer_{{ action.delay_timer_no }}();
        IF (StepTimer_{{ action.delay_timer_no }}.Q) THEN 
            {{ tia_convert_action(action) }};
        END_IF;
				  {{~ else ~}}
        IF ({{ tia_convert_condition(action.condition) }}) THEN
            {{ tia_convert_action(action) }};
        END_IF;
				  {{~ end ~}}
				{{~ end ~}}
			{{~ end ~}}

            {{~ for transition in step.ordered_transitions ~}}	
        // Transition {{ step.name }} to {{ transition.target }}
        // {{ transition.comment }}
        IF (
            {{ tia_convert_condition(transition.condition_code) }}
        ) THEN
            #stepnumber := {{ transition.target }};
            #state := {{ transition.target_sequence_integer }}; // {{ transition.target_sequence_name }}
        END_IF;                
        
			{{~ end # for loop of transitions ~}}
        
		{{~ end # for loop of steps ~}}
	{{~ end # if sequence exists ~}}
{{~ end # for loop of sequences ~}}
END_CASE

                ]]>
            </xhtml>
        </ST>
    </body>
</pou>
